// Code generated by protoc-gen-go. DO NOT EDIT.
// source: player.proto

package player

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type UsernamePassword struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Passwrord            string   `protobuf:"bytes,2,opt,name=passwrord,proto3" json:"passwrord,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UsernamePassword) Reset()         { *m = UsernamePassword{} }
func (m *UsernamePassword) String() string { return proto.CompactTextString(m) }
func (*UsernamePassword) ProtoMessage()    {}
func (*UsernamePassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{1}
}

func (m *UsernamePassword) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsernamePassword.Unmarshal(m, b)
}
func (m *UsernamePassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsernamePassword.Marshal(b, m, deterministic)
}
func (m *UsernamePassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsernamePassword.Merge(m, src)
}
func (m *UsernamePassword) XXX_Size() int {
	return xxx_messageInfo_UsernamePassword.Size(m)
}
func (m *UsernamePassword) XXX_DiscardUnknown() {
	xxx_messageInfo_UsernamePassword.DiscardUnknown(m)
}

var xxx_messageInfo_UsernamePassword proto.InternalMessageInfo

func (m *UsernamePassword) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UsernamePassword) GetPasswrord() string {
	if m != nil {
		return m.Passwrord
	}
	return ""
}

type Request struct {
	Term                 string   `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	N                    int64    `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{2}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *Request) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type Search struct {
	Term                 string   `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	N                    int64    `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Search) Reset()         { *m = Search{} }
func (m *Search) String() string { return proto.CompactTextString(m) }
func (*Search) ProtoMessage()    {}
func (*Search) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{3}
}

func (m *Search) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Search.Unmarshal(m, b)
}
func (m *Search) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Search.Marshal(b, m, deterministic)
}
func (m *Search) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Search.Merge(m, src)
}
func (m *Search) XXX_Size() int {
	return xxx_messageInfo_Search.Size(m)
}
func (m *Search) XXX_DiscardUnknown() {
	xxx_messageInfo_Search.DiscardUnknown(m)
}

var xxx_messageInfo_Search proto.InternalMessageInfo

func (m *Search) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *Search) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type Page struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize             int64    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Sort                 string   `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{4}
}

func (m *Page) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Page.Unmarshal(m, b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Page.Marshal(b, m, deterministic)
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return xxx_messageInfo_Page.Size(m)
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Page) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *Page) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type Progress struct {
	N                    int64    `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	Total                int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Progress) Reset()         { *m = Progress{} }
func (m *Progress) String() string { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()    {}
func (*Progress) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{5}
}

func (m *Progress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Progress.Unmarshal(m, b)
}
func (m *Progress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Progress.Marshal(b, m, deterministic)
}
func (m *Progress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Progress.Merge(m, src)
}
func (m *Progress) XXX_Size() int {
	return xxx_messageInfo_Progress.Size(m)
}
func (m *Progress) XXX_DiscardUnknown() {
	xxx_messageInfo_Progress.DiscardUnknown(m)
}

var xxx_messageInfo_Progress proto.InternalMessageInfo

func (m *Progress) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *Progress) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Float struct {
	Value                float32  `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Float) Reset()         { *m = Float{} }
func (m *Float) String() string { return proto.CompactTextString(m) }
func (*Float) ProtoMessage()    {}
func (*Float) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{6}
}

func (m *Float) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Float.Unmarshal(m, b)
}
func (m *Float) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Float.Marshal(b, m, deterministic)
}
func (m *Float) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Float.Merge(m, src)
}
func (m *Float) XXX_Size() int {
	return xxx_messageInfo_Float.Size(m)
}
func (m *Float) XXX_DiscardUnknown() {
	xxx_messageInfo_Float.DiscardUnknown(m)
}

var xxx_messageInfo_Float proto.InternalMessageInfo

func (m *Float) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Int struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Int) Reset()         { *m = Int{} }
func (m *Int) String() string { return proto.CompactTextString(m) }
func (*Int) ProtoMessage()    {}
func (*Int) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{7}
}

func (m *Int) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Int.Unmarshal(m, b)
}
func (m *Int) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Int.Marshal(b, m, deterministic)
}
func (m *Int) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int.Merge(m, src)
}
func (m *Int) XXX_Size() int {
	return xxx_messageInfo_Int.Size(m)
}
func (m *Int) XXX_DiscardUnknown() {
	xxx_messageInfo_Int.DiscardUnknown(m)
}

var xxx_messageInfo_Int proto.InternalMessageInfo

func (m *Int) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Ints struct {
	Value                []int64  `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ints) Reset()         { *m = Ints{} }
func (m *Ints) String() string { return proto.CompactTextString(m) }
func (*Ints) ProtoMessage()    {}
func (*Ints) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{8}
}

func (m *Ints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ints.Unmarshal(m, b)
}
func (m *Ints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ints.Marshal(b, m, deterministic)
}
func (m *Ints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ints.Merge(m, src)
}
func (m *Ints) XXX_Size() int {
	return xxx_messageInfo_Ints.Size(m)
}
func (m *Ints) XXX_DiscardUnknown() {
	xxx_messageInfo_Ints.DiscardUnknown(m)
}

var xxx_messageInfo_Ints proto.InternalMessageInfo

func (m *Ints) GetValue() []int64 {
	if m != nil {
		return m.Value
	}
	return nil
}

type String struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{9}
}

func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (m *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(m, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Bool struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bool) Reset()         { *m = Bool{} }
func (m *Bool) String() string { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()    {}
func (*Bool) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{10}
}

func (m *Bool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bool.Unmarshal(m, b)
}
func (m *Bool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bool.Marshal(b, m, deterministic)
}
func (m *Bool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bool.Merge(m, src)
}
func (m *Bool) XXX_Size() int {
	return xxx_messageInfo_Bool.Size(m)
}
func (m *Bool) XXX_DiscardUnknown() {
	xxx_messageInfo_Bool.DiscardUnknown(m)
}

var xxx_messageInfo_Bool proto.InternalMessageInfo

func (m *Bool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Track struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Duration             int64    `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Uri                  string   `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Track) Reset()         { *m = Track{} }
func (m *Track) String() string { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()    {}
func (*Track) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{11}
}

func (m *Track) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Track.Unmarshal(m, b)
}
func (m *Track) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Track.Marshal(b, m, deterministic)
}
func (m *Track) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Track.Merge(m, src)
}
func (m *Track) XXX_Size() int {
	return xxx_messageInfo_Track.Size(m)
}
func (m *Track) XXX_DiscardUnknown() {
	xxx_messageInfo_Track.DiscardUnknown(m)
}

var xxx_messageInfo_Track proto.InternalMessageInfo

func (m *Track) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Track) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Track) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Track) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type Artist struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Artist) Reset()         { *m = Artist{} }
func (m *Artist) String() string { return proto.CompactTextString(m) }
func (*Artist) ProtoMessage()    {}
func (*Artist) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{12}
}

func (m *Artist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Artist.Unmarshal(m, b)
}
func (m *Artist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Artist.Marshal(b, m, deterministic)
}
func (m *Artist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artist.Merge(m, src)
}
func (m *Artist) XXX_Size() int {
	return xxx_messageInfo_Artist.Size(m)
}
func (m *Artist) XXX_DiscardUnknown() {
	xxx_messageInfo_Artist.DiscardUnknown(m)
}

var xxx_messageInfo_Artist proto.InternalMessageInfo

func (m *Artist) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Artist) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Album struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Album) Reset()         { *m = Album{} }
func (m *Album) String() string { return proto.CompactTextString(m) }
func (*Album) ProtoMessage()    {}
func (*Album) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{13}
}

func (m *Album) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Album.Unmarshal(m, b)
}
func (m *Album) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Album.Marshal(b, m, deterministic)
}
func (m *Album) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Album.Merge(m, src)
}
func (m *Album) XXX_Size() int {
	return xxx_messageInfo_Album.Size(m)
}
func (m *Album) XXX_DiscardUnknown() {
	xxx_messageInfo_Album.DiscardUnknown(m)
}

var xxx_messageInfo_Album proto.InternalMessageInfo

func (m *Album) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Album) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Playlist struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Playlist) Reset()         { *m = Playlist{} }
func (m *Playlist) String() string { return proto.CompactTextString(m) }
func (*Playlist) ProtoMessage()    {}
func (*Playlist) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{14}
}

func (m *Playlist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Playlist.Unmarshal(m, b)
}
func (m *Playlist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Playlist.Marshal(b, m, deterministic)
}
func (m *Playlist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Playlist.Merge(m, src)
}
func (m *Playlist) XXX_Size() int {
	return xxx_messageInfo_Playlist.Size(m)
}
func (m *Playlist) XXX_DiscardUnknown() {
	xxx_messageInfo_Playlist.DiscardUnknown(m)
}

var xxx_messageInfo_Playlist proto.InternalMessageInfo

func (m *Playlist) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Playlist) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Result struct {
	Service              string    `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Path                 string    `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Playcount            int64     `protobuf:"varint,3,opt,name=playcount,proto3" json:"playcount,omitempty"`
	Track                *Track    `protobuf:"bytes,4,opt,name=track,proto3" json:"track,omitempty"`
	Album                *Album    `protobuf:"bytes,5,opt,name=album,proto3" json:"album,omitempty"`
	Artist               *Artist   `protobuf:"bytes,6,opt,name=artist,proto3" json:"artist,omitempty"`
	Playlist             *Playlist `protobuf:"bytes,7,opt,name=playlist,proto3" json:"playlist,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{15}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Result) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Result) GetPlaycount() int64 {
	if m != nil {
		return m.Playcount
	}
	return 0
}

func (m *Result) GetTrack() *Track {
	if m != nil {
		return m.Track
	}
	return nil
}

func (m *Result) GetAlbum() *Album {
	if m != nil {
		return m.Album
	}
	return nil
}

func (m *Result) GetArtist() *Artist {
	if m != nil {
		return m.Artist
	}
	return nil
}

func (m *Result) GetPlaylist() *Playlist {
	if m != nil {
		return m.Playlist
	}
	return nil
}

type Results struct {
	Type                 string    `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Header               string    `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Fmt                  string    `protobuf:"bytes,3,opt,name=fmt,proto3" json:"fmt,omitempty"`
	Album                *Album    `protobuf:"bytes,4,opt,name=album,proto3" json:"album,omitempty"`
	Results              []*Result `protobuf:"bytes,5,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Results) Reset()         { *m = Results{} }
func (m *Results) String() string { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()    {}
func (*Results) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d803d1b635d5c6, []int{16}
}

func (m *Results) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Results.Unmarshal(m, b)
}
func (m *Results) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Results.Marshal(b, m, deterministic)
}
func (m *Results) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Results.Merge(m, src)
}
func (m *Results) XXX_Size() int {
	return xxx_messageInfo_Results.Size(m)
}
func (m *Results) XXX_DiscardUnknown() {
	xxx_messageInfo_Results.DiscardUnknown(m)
}

var xxx_messageInfo_Results proto.InternalMessageInfo

func (m *Results) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Results) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *Results) GetFmt() string {
	if m != nil {
		return m.Fmt
	}
	return ""
}

func (m *Results) GetAlbum() *Album {
	if m != nil {
		return m.Album
	}
	return nil
}

func (m *Results) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "player.Empty")
	proto.RegisterType((*UsernamePassword)(nil), "player.UsernamePassword")
	proto.RegisterType((*Request)(nil), "player.Request")
	proto.RegisterType((*Search)(nil), "player.Search")
	proto.RegisterType((*Page)(nil), "player.Page")
	proto.RegisterType((*Progress)(nil), "player.Progress")
	proto.RegisterType((*Float)(nil), "player.Float")
	proto.RegisterType((*Int)(nil), "player.Int")
	proto.RegisterType((*Ints)(nil), "player.Ints")
	proto.RegisterType((*String)(nil), "player.String")
	proto.RegisterType((*Bool)(nil), "player.Bool")
	proto.RegisterType((*Track)(nil), "player.Track")
	proto.RegisterType((*Artist)(nil), "player.Artist")
	proto.RegisterType((*Album)(nil), "player.Album")
	proto.RegisterType((*Playlist)(nil), "player.Playlist")
	proto.RegisterType((*Result)(nil), "player.Result")
	proto.RegisterType((*Results)(nil), "player.Results")
}

func init() { proto.RegisterFile("player.proto", fileDescriptor_41d803d1b635d5c6) }

var fileDescriptor_41d803d1b635d5c6 = []byte{
	// 864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x5f, 0x93, 0xe2, 0x44,
	0x10, 0x27, 0xe4, 0x0f, 0xd0, 0x8b, 0xb7, 0xd4, 0x94, 0x65, 0xa5, 0xf0, 0xb4, 0xae, 0x62, 0x29,
	0x78, 0xb2, 0x88, 0xa8, 0x55, 0xbe, 0x9e, 0x9e, 0x9c, 0x67, 0x6d, 0x6d, 0x61, 0x50, 0x5f, 0x7c,
	0x9a, 0x25, 0x23, 0xa4, 0x36, 0xc9, 0xc4, 0x99, 0xc9, 0x22, 0x7e, 0x03, 0xbf, 0x80, 0x9f, 0xd4,
	0x77, 0xad, 0xf9, 0x93, 0x00, 0x01, 0x85, 0x7b, 0x62, 0x3a, 0xfd, 0xfb, 0x75, 0xf7, 0xaf, 0xd3,
	0xd3, 0x01, 0xba, 0x79, 0x82, 0xb7, 0x84, 0x8d, 0x73, 0x46, 0x05, 0x45, 0x9e, 0xb6, 0x82, 0x16,
	0xb8, 0xdf, 0xa6, 0xb9, 0xd8, 0x06, 0xb7, 0xd0, 0xfb, 0x89, 0x13, 0x96, 0xe1, 0x94, 0xcc, 0x31,
	0xe7, 0x1b, 0xca, 0x22, 0xd4, 0x87, 0x76, 0x61, 0x9e, 0xf9, 0xd6, 0x33, 0x6b, 0xd8, 0x09, 0x2b,
	0x1b, 0x3d, 0x85, 0x4e, 0x2e, 0x71, 0x8c, 0xb2, 0xc8, 0x6f, 0x2a, 0xe7, 0xee, 0x41, 0xf0, 0x09,
	0xb4, 0x42, 0xf2, 0x5b, 0x41, 0xb8, 0x40, 0x08, 0x1c, 0x41, 0x58, 0x6a, 0x02, 0xa8, 0x33, 0xea,
	0x82, 0x95, 0x29, 0x92, 0x1d, 0x5a, 0x59, 0xf0, 0x1c, 0xbc, 0x05, 0xc1, 0x6c, 0xb9, 0xbe, 0x00,
	0xfb, 0x3d, 0x38, 0x73, 0xbc, 0x22, 0x12, 0x99, 0xe3, 0x95, 0x2e, 0xcb, 0x0e, 0xd5, 0x59, 0x96,
	0x2b, 0x7f, 0x17, 0xf1, 0x1f, 0xc4, 0x10, 0x2a, 0x5b, 0xe2, 0x39, 0x65, 0xc2, 0xb7, 0x75, 0x64,
	0x79, 0x0e, 0xc6, 0xd0, 0x9e, 0x33, 0xba, 0x62, 0x84, 0x73, 0x9d, 0xc5, 0x32, 0x59, 0xd0, 0xdb,
	0xe0, 0x0a, 0x2a, 0x70, 0x62, 0xc2, 0x68, 0x23, 0x78, 0x0f, 0xdc, 0x59, 0x42, 0xb1, 0x90, 0xee,
	0x47, 0x9c, 0x14, 0x3a, 0x7b, 0x33, 0xd4, 0x46, 0xf0, 0x2e, 0xd8, 0xaf, 0xb3, 0x9a, 0xd3, 0x2e,
	0x9d, 0x4f, 0xc1, 0x79, 0x9d, 0x09, 0xbe, 0xef, 0xb5, 0x77, 0xde, 0xf7, 0xc1, 0x5b, 0x08, 0x16,
	0x67, 0xab, 0x43, 0x76, 0x67, 0x8f, 0xfd, 0x35, 0xa5, 0xc9, 0xa1, 0xb7, 0x5d, 0x7a, 0x7f, 0x01,
	0xf7, 0x47, 0x86, 0x97, 0x0f, 0xe8, 0x09, 0x34, 0xe3, 0xc8, 0x30, 0x9b, 0x71, 0xa4, 0x64, 0xc4,
	0x22, 0x21, 0xe6, 0xfd, 0x68, 0x43, 0xb6, 0x29, 0x2a, 0x18, 0x16, 0x31, 0xcd, 0x54, 0x3b, 0xec,
	0xb0, 0xb2, 0x51, 0x0f, 0xec, 0x82, 0xc5, 0xbe, 0xa3, 0xf0, 0xf2, 0x18, 0x8c, 0xc0, 0x7b, 0xc1,
	0x44, 0xcc, 0xc5, 0x51, 0x74, 0x04, 0x8e, 0x9a, 0x0c, 0x1d, 0x5c, 0x9d, 0x83, 0x1b, 0x70, 0x5f,
	0x24, 0xf7, 0x45, 0x7a, 0x59, 0x29, 0xc1, 0x04, 0xda, 0xf3, 0x04, 0x6f, 0x93, 0x53, 0xe1, 0x4f,
	0x33, 0xfe, 0xb6, 0xc0, 0x0b, 0x09, 0x2f, 0x12, 0x81, 0x7c, 0x68, 0x71, 0xc2, 0x1e, 0xe3, 0x65,
	0xd9, 0xac, 0xd2, 0xd4, 0xc3, 0x21, 0xd6, 0x65, 0x65, 0xf2, 0xac, 0xe6, 0x35, 0xc1, 0xdb, 0x25,
	0x2d, 0x32, 0x61, 0x64, 0xef, 0x1e, 0xa0, 0x0f, 0xc0, 0x15, 0xb2, 0x85, 0x4a, 0xf9, 0xd5, 0xf4,
	0xad, 0xb1, 0xb9, 0x2c, 0xaa, 0xaf, 0xa1, 0xf6, 0x49, 0x10, 0x96, 0xe2, 0x7c, 0xf7, 0x10, 0xa4,
	0x14, 0x87, 0xda, 0x87, 0x3e, 0x02, 0x0f, 0xab, 0x7e, 0xf9, 0x9e, 0x42, 0x3d, 0xa9, 0x50, 0xea,
	0x69, 0x68, 0xbc, 0x68, 0x04, 0xed, 0xdc, 0x48, 0xf7, 0x5b, 0x0a, 0xd9, 0x2b, 0x91, 0x65, 0x4b,
	0xc2, 0x0a, 0x11, 0xfc, 0x65, 0xc9, 0x0b, 0x25, 0x65, 0x73, 0x75, 0x49, 0xb6, 0x39, 0xa9, 0x2e,
	0xc9, 0x36, 0x27, 0xe8, 0x1d, 0xf0, 0xd6, 0x04, 0x47, 0x84, 0x19, 0xcd, 0xc6, 0x92, 0xef, 0xf3,
	0xd7, 0xb4, 0x9c, 0x7a, 0x79, 0xdc, 0x89, 0x70, 0xfe, 0x47, 0xc4, 0x10, 0x5a, 0x4c, 0x67, 0xf3,
	0xdd, 0x67, 0xf6, 0xbe, 0x0a, 0x5d, 0x44, 0x58, 0xba, 0xa7, 0x7f, 0xba, 0xe0, 0xcd, 0x95, 0x0b,
	0x0d, 0xc0, 0x91, 0x27, 0x54, 0xc3, 0xf6, 0xab, 0x14, 0x7a, 0xd1, 0x34, 0xd0, 0x0d, 0x74, 0x24,
	0x50, 0x0f, 0xca, 0xf5, 0x21, 0x9a, 0x1f, 0xc3, 0x87, 0xe0, 0xfd, 0x4c, 0x93, 0x22, 0x25, 0xa8,
	0x72, 0xa9, 0x6b, 0xd8, 0x3f, 0x34, 0x83, 0x06, 0x1a, 0x80, 0x3b, 0xc7, 0x05, 0xdf, 0x03, 0xaa,
	0x18, 0xa7, 0x2a, 0xb8, 0x9a, 0x61, 0x2e, 0x66, 0x94, 0x6d, 0x30, 0x8b, 0xce, 0xc2, 0x87, 0x72,
	0xe6, 0x36, 0x71, 0x76, 0x1e, 0xf9, 0x31, 0xb8, 0x3f, 0x14, 0xa4, 0x38, 0xaa, 0xa0, 0xae, 0x32,
	0x68, 0xa0, 0x29, 0x5c, 0x87, 0x24, 0xa5, 0x8f, 0x64, 0xc6, 0x68, 0xaa, 0x49, 0xdd, 0x12, 0x25,
	0x57, 0xc5, 0x29, 0xce, 0x18, 0xda, 0x77, 0xe4, 0x77, 0xb1, 0xa0, 0xd9, 0x6a, 0xd7, 0x66, 0xbd,
	0x39, 0xfa, 0xb5, 0xb6, 0x07, 0x8d, 0x89, 0x85, 0xbe, 0x80, 0xae, 0xec, 0x74, 0xb5, 0xe5, 0xea,
	0x9c, 0xdd, 0xc8, 0x19, 0x84, 0x62, 0x7d, 0x05, 0xbd, 0x97, 0x74, 0x93, 0x25, 0x14, 0x47, 0x6f,
	0xc8, 0x7c, 0x0e, 0xad, 0xef, 0x62, 0x2e, 0x28, 0xdb, 0xee, 0xb4, 0xc8, 0x75, 0x7d, 0x4a, 0xcb,
	0x00, 0x9c, 0x97, 0x34, 0x23, 0x47, 0x91, 0x8f, 0x7a, 0x3a, 0x00, 0xf7, 0x9b, 0x84, 0x9e, 0x7f,
	0xab, 0xd3, 0x7f, 0x1c, 0x68, 0xcd, 0x88, 0x58, 0xae, 0xf5, 0x30, 0xde, 0xe1, 0xf4, 0x88, 0x53,
	0x4b, 0xa6, 0x5e, 0x83, 0x7b, 0x4b, 0x57, 0x71, 0x86, 0xfc, 0xd2, 0x55, 0xff, 0x0c, 0x1e, 0x57,
	0xf4, 0x21, 0x38, 0x73, 0xb9, 0xac, 0x6b, 0xc1, 0x2b, 0xc9, 0x72, 0x57, 0x07, 0x0d, 0x34, 0x82,
	0x8e, 0x9a, 0xf1, 0xdb, 0x38, 0x7b, 0x38, 0x5f, 0xc8, 0x04, 0x60, 0x16, 0x67, 0x91, 0x59, 0xb6,
	0x7b, 0x0d, 0x53, 0x9f, 0xd1, 0x53, 0x1d, 0xfc, 0x14, 0x3a, 0x8a, 0x51, 0xbf, 0x47, 0xe7, 0x08,
	0xfa, 0x63, 0x71, 0x09, 0xe1, 0x06, 0xda, 0xaf, 0x88, 0x30, 0x1b, 0xbd, 0xf6, 0x9e, 0x4e, 0xc0,
	0x47, 0x0a, 0x6e, 0xbe, 0x45, 0xff, 0x35, 0x9e, 0x95, 0xe0, 0x2f, 0xe1, 0x5a, 0x06, 0x57, 0x7a,
	0x55, 0x0a, 0x7e, 0x51, 0x4d, 0xfb, 0x34, 0x95, 0xea, 0x32, 0xda, 0x04, 0xba, 0xaf, 0x88, 0x28,
	0x57, 0x2b, 0xbf, 0xe0, 0x82, 0x7e, 0x06, 0x57, 0x7b, 0x8c, 0x4b, 0x92, 0xdc, 0x7b, 0xea, 0xcf,
	0xd5, 0xe7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xbd, 0xb4, 0xd6, 0x6c, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayerClient interface {
	Play(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error)
	PlayAlbum(ctx context.Context, in *Results, opts ...grpc.CallOption) (*Empty, error)
	Volume(ctx context.Context, in *Float, opts ...grpc.CallOption) (*Float, error)
	Pause(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	FastForward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Rewind(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Queue(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Results, error)
	RemoveFromQueue(ctx context.Context, in *Ints, opts ...grpc.CallOption) (*Results, error)
	NextSong(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_NextSongClient, error)
	PlayProgress(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_PlayProgressClient, error)
	DownloadProgress(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_DownloadProgressClient, error)
	History(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Results, error)
	Done(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type playerClient struct {
	cc *grpc.ClientConn
}

func NewPlayerClient(cc *grpc.ClientConn) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) Play(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.Player/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) PlayAlbum(ctx context.Context, in *Results, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.Player/PlayAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Volume(ctx context.Context, in *Float, opts ...grpc.CallOption) (*Float, error) {
	out := new(Float)
	err := c.cc.Invoke(ctx, "/player.Player/Volume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Pause(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.Player/Pause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) FastForward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.Player/FastForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Rewind(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.Player/Rewind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Queue(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Player/Queue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) RemoveFromQueue(ctx context.Context, in *Ints, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Player/RemoveFromQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) NextSong(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_NextSongClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Player_serviceDesc.Streams[0], "/player.Player/NextSong", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerNextSongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Player_NextSongClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type playerNextSongClient struct {
	grpc.ClientStream
}

func (x *playerNextSongClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerClient) PlayProgress(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_PlayProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Player_serviceDesc.Streams[1], "/player.Player/PlayProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerPlayProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Player_PlayProgressClient interface {
	Recv() (*Progress, error)
	grpc.ClientStream
}

type playerPlayProgressClient struct {
	grpc.ClientStream
}

func (x *playerPlayProgressClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerClient) DownloadProgress(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_DownloadProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Player_serviceDesc.Streams[2], "/player.Player/DownloadProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerDownloadProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Player_DownloadProgressClient interface {
	Recv() (*Progress, error)
	grpc.ClientStream
}

type playerDownloadProgressClient struct {
	grpc.ClientStream
}

func (x *playerDownloadProgressClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerClient) History(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Player/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Done(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.Player/Done", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.Player/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServer is the server API for Player service.
type PlayerServer interface {
	Play(context.Context, *Result) (*Empty, error)
	PlayAlbum(context.Context, *Results) (*Empty, error)
	Volume(context.Context, *Float) (*Float, error)
	Pause(context.Context, *Empty) (*Empty, error)
	FastForward(context.Context, *Empty) (*Empty, error)
	Rewind(context.Context, *Empty) (*Empty, error)
	Queue(context.Context, *Empty) (*Results, error)
	RemoveFromQueue(context.Context, *Ints) (*Results, error)
	NextSong(*String, Player_NextSongServer) error
	PlayProgress(*String, Player_PlayProgressServer) error
	DownloadProgress(*String, Player_DownloadProgressServer) error
	History(context.Context, *Page) (*Results, error)
	Done(context.Context, *String) (*Empty, error)
	Close(context.Context, *Empty) (*Empty, error)
}

// UnimplementedPlayerServer can be embedded to have forward compatible implementations.
type UnimplementedPlayerServer struct {
}

func (*UnimplementedPlayerServer) Play(ctx context.Context, req *Result) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (*UnimplementedPlayerServer) PlayAlbum(ctx context.Context, req *Results) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayAlbum not implemented")
}
func (*UnimplementedPlayerServer) Volume(ctx context.Context, req *Float) (*Float, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Volume not implemented")
}
func (*UnimplementedPlayerServer) Pause(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (*UnimplementedPlayerServer) FastForward(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FastForward not implemented")
}
func (*UnimplementedPlayerServer) Rewind(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rewind not implemented")
}
func (*UnimplementedPlayerServer) Queue(ctx context.Context, req *Empty) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Queue not implemented")
}
func (*UnimplementedPlayerServer) RemoveFromQueue(ctx context.Context, req *Ints) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromQueue not implemented")
}
func (*UnimplementedPlayerServer) NextSong(req *String, srv Player_NextSongServer) error {
	return status.Errorf(codes.Unimplemented, "method NextSong not implemented")
}
func (*UnimplementedPlayerServer) PlayProgress(req *String, srv Player_PlayProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method PlayProgress not implemented")
}
func (*UnimplementedPlayerServer) DownloadProgress(req *String, srv Player_DownloadProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadProgress not implemented")
}
func (*UnimplementedPlayerServer) History(ctx context.Context, req *Page) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (*UnimplementedPlayerServer) Done(ctx context.Context, req *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Done not implemented")
}
func (*UnimplementedPlayerServer) Close(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}

func RegisterPlayerServer(s *grpc.Server, srv PlayerServer) {
	s.RegisterService(&_Player_serviceDesc, srv)
}

func _Player_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Play(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_PlayAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Results)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).PlayAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/PlayAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).PlayAlbum(ctx, req.(*Results))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Volume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Float)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Volume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Volume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Volume(ctx, req.(*Float))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Pause(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_FastForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).FastForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/FastForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).FastForward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Rewind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Rewind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Rewind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Rewind(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Queue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Queue(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_RemoveFromQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ints)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).RemoveFromQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/RemoveFromQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).RemoveFromQueue(ctx, req.(*Ints))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_NextSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServer).NextSong(m, &playerNextSongServer{stream})
}

type Player_NextSongServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type playerNextSongServer struct {
	grpc.ServerStream
}

func (x *playerNextSongServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _Player_PlayProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServer).PlayProgress(m, &playerPlayProgressServer{stream})
}

type Player_PlayProgressServer interface {
	Send(*Progress) error
	grpc.ServerStream
}

type playerPlayProgressServer struct {
	grpc.ServerStream
}

func (x *playerPlayProgressServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func _Player_DownloadProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServer).DownloadProgress(m, &playerDownloadProgressServer{stream})
}

type Player_DownloadProgressServer interface {
	Send(*Progress) error
	grpc.ServerStream
}

type playerDownloadProgressServer struct {
	grpc.ServerStream
}

func (x *playerDownloadProgressServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func _Player_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).History(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Done(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Close(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Player_serviceDesc = grpc.ServiceDesc{
	ServiceName: "player.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _Player_Play_Handler,
		},
		{
			MethodName: "PlayAlbum",
			Handler:    _Player_PlayAlbum_Handler,
		},
		{
			MethodName: "Volume",
			Handler:    _Player_Volume_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Player_Pause_Handler,
		},
		{
			MethodName: "FastForward",
			Handler:    _Player_FastForward_Handler,
		},
		{
			MethodName: "Rewind",
			Handler:    _Player_Rewind_Handler,
		},
		{
			MethodName: "Queue",
			Handler:    _Player_Queue_Handler,
		},
		{
			MethodName: "RemoveFromQueue",
			Handler:    _Player_RemoveFromQueue_Handler,
		},
		{
			MethodName: "History",
			Handler:    _Player_History_Handler,
		},
		{
			MethodName: "Done",
			Handler:    _Player_Done_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Player_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NextSong",
			Handler:       _Player_NextSong_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PlayProgress",
			Handler:       _Player_PlayProgress_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadProgress",
			Handler:       _Player_DownloadProgress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "player.proto",
}

// FetcherClient is the client API for Fetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FetcherClient interface {
	Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error)
	Login(ctx context.Context, in *UsernamePassword, opts ...grpc.CallOption) (*Empty, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Bool, error)
	AlbumLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error)
	FindArtist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
	FindAlbum(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
	FindTrack(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
	GetAlbum(ctx context.Context, in *String, opts ...grpc.CallOption) (*Results, error)
	GetTrack(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	GetArtistAlbums(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
	GetArtistTracks(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
	GetPlaylists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Results, error)
	GetPlaylist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
}

type fetcherClient struct {
	cc *grpc.ClientConn
}

func NewFetcherClient(cc *grpc.ClientConn) FetcherClient {
	return &fetcherClient{cc}
}

func (c *fetcherClient) Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/player.Fetcher/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) Login(ctx context.Context, in *UsernamePassword, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/player.Fetcher/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/player.Fetcher/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) AlbumLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/player.Fetcher/AlbumLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) FindArtist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Fetcher/FindArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) FindAlbum(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Fetcher/FindAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) FindTrack(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Fetcher/FindTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) GetAlbum(ctx context.Context, in *String, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Fetcher/GetAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) GetTrack(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/player.Fetcher/GetTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) GetArtistAlbums(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Fetcher/GetArtistAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) GetArtistTracks(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Fetcher/GetArtistTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) GetPlaylists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Fetcher/GetPlaylists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetcherClient) GetPlaylist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := c.cc.Invoke(ctx, "/player.Fetcher/GetPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetcherServer is the server API for Fetcher service.
type FetcherServer interface {
	Name(context.Context, *Empty) (*String, error)
	Login(context.Context, *UsernamePassword) (*Empty, error)
	Ping(context.Context, *Empty) (*Bool, error)
	AlbumLink(context.Context, *Empty) (*String, error)
	FindArtist(context.Context, *Request) (*Results, error)
	FindAlbum(context.Context, *Request) (*Results, error)
	FindTrack(context.Context, *Request) (*Results, error)
	GetAlbum(context.Context, *String) (*Results, error)
	GetTrack(context.Context, *String) (*String, error)
	GetArtistAlbums(context.Context, *Request) (*Results, error)
	GetArtistTracks(context.Context, *Request) (*Results, error)
	GetPlaylists(context.Context, *Empty) (*Results, error)
	GetPlaylist(context.Context, *Request) (*Results, error)
}

// UnimplementedFetcherServer can be embedded to have forward compatible implementations.
type UnimplementedFetcherServer struct {
}

func (*UnimplementedFetcherServer) Name(ctx context.Context, req *Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (*UnimplementedFetcherServer) Login(ctx context.Context, req *UsernamePassword) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedFetcherServer) Ping(ctx context.Context, req *Empty) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedFetcherServer) AlbumLink(ctx context.Context, req *Empty) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlbumLink not implemented")
}
func (*UnimplementedFetcherServer) FindArtist(ctx context.Context, req *Request) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindArtist not implemented")
}
func (*UnimplementedFetcherServer) FindAlbum(ctx context.Context, req *Request) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAlbum not implemented")
}
func (*UnimplementedFetcherServer) FindTrack(ctx context.Context, req *Request) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTrack not implemented")
}
func (*UnimplementedFetcherServer) GetAlbum(ctx context.Context, req *String) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (*UnimplementedFetcherServer) GetTrack(ctx context.Context, req *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrack not implemented")
}
func (*UnimplementedFetcherServer) GetArtistAlbums(ctx context.Context, req *Request) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistAlbums not implemented")
}
func (*UnimplementedFetcherServer) GetArtistTracks(ctx context.Context, req *Request) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistTracks not implemented")
}
func (*UnimplementedFetcherServer) GetPlaylists(ctx context.Context, req *Empty) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylists not implemented")
}
func (*UnimplementedFetcherServer) GetPlaylist(ctx context.Context, req *Request) (*Results, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylist not implemented")
}

func RegisterFetcherServer(s *grpc.Server, srv FetcherServer) {
	s.RegisterService(&_Fetcher_serviceDesc, srv)
}

func _Fetcher_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).Name(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernamePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).Login(ctx, req.(*UsernamePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_AlbumLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).AlbumLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/AlbumLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).AlbumLink(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_FindArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).FindArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/FindArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).FindArtist(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_FindAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).FindAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/FindAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).FindAlbum(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_FindTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).FindTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/FindTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).FindTrack(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/GetAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).GetAlbum(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_GetTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).GetTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/GetTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).GetTrack(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_GetArtistAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).GetArtistAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/GetArtistAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).GetArtistAlbums(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_GetArtistTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).GetArtistTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/GetArtistTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).GetArtistTracks(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_GetPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).GetPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/GetPlaylists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).GetPlaylists(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetcher_GetPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetcherServer).GetPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Fetcher/GetPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetcherServer).GetPlaylist(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fetcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "player.Fetcher",
	HandlerType: (*FetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _Fetcher_Name_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Fetcher_Login_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Fetcher_Ping_Handler,
		},
		{
			MethodName: "AlbumLink",
			Handler:    _Fetcher_AlbumLink_Handler,
		},
		{
			MethodName: "FindArtist",
			Handler:    _Fetcher_FindArtist_Handler,
		},
		{
			MethodName: "FindAlbum",
			Handler:    _Fetcher_FindAlbum_Handler,
		},
		{
			MethodName: "FindTrack",
			Handler:    _Fetcher_FindTrack_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _Fetcher_GetAlbum_Handler,
		},
		{
			MethodName: "GetTrack",
			Handler:    _Fetcher_GetTrack_Handler,
		},
		{
			MethodName: "GetArtistAlbums",
			Handler:    _Fetcher_GetArtistAlbums_Handler,
		},
		{
			MethodName: "GetArtistTracks",
			Handler:    _Fetcher_GetArtistTracks_Handler,
		},
		{
			MethodName: "GetPlaylists",
			Handler:    _Fetcher_GetPlaylists_Handler,
		},
		{
			MethodName: "GetPlaylist",
			Handler:    _Fetcher_GetPlaylist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}
