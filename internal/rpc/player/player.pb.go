// Code generated by protoc-gen-go. DO NOT EDIT.
// source: player.proto

/*
Package player is a generated protocol buffer package.

It is generated from these files:
	player.proto

It has these top-level messages:
	Empty
	UsernamePassword
	Request
	Search
	Page
	Progress
	Float
	Int
	Ints
	String
	Bool
	Track
	Artist
	Album
	Playlist
	Result
	Results
*/
package player

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UsernamePassword struct {
	Username  string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Passwrord string `protobuf:"bytes,2,opt,name=passwrord" json:"passwrord,omitempty"`
}

func (m *UsernamePassword) Reset()                    { *m = UsernamePassword{} }
func (m *UsernamePassword) String() string            { return proto.CompactTextString(m) }
func (*UsernamePassword) ProtoMessage()               {}
func (*UsernamePassword) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UsernamePassword) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UsernamePassword) GetPasswrord() string {
	if m != nil {
		return m.Passwrord
	}
	return ""
}

type Request struct {
	Term string `protobuf:"bytes,1,opt,name=term" json:"term,omitempty"`
	N    int64  `protobuf:"varint,2,opt,name=n" json:"n,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Request) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *Request) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type Search struct {
	Term string `protobuf:"bytes,1,opt,name=term" json:"term,omitempty"`
	N    int64  `protobuf:"varint,2,opt,name=n" json:"n,omitempty"`
}

func (m *Search) Reset()                    { *m = Search{} }
func (m *Search) String() string            { return proto.CompactTextString(m) }
func (*Search) ProtoMessage()               {}
func (*Search) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Search) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *Search) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type Page struct {
	Page     int64  `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	PageSize int64  `protobuf:"varint,2,opt,name=pageSize" json:"pageSize,omitempty"`
	Sort     string `protobuf:"bytes,3,opt,name=sort" json:"sort,omitempty"`
}

func (m *Page) Reset()                    { *m = Page{} }
func (m *Page) String() string            { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()               {}
func (*Page) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Page) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *Page) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

type Progress struct {
	N     int64 `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
	Total int64 `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *Progress) Reset()                    { *m = Progress{} }
func (m *Progress) String() string            { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()               {}
func (*Progress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Progress) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *Progress) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Float struct {
	Value float32 `protobuf:"fixed32,1,opt,name=value" json:"value,omitempty"`
}

func (m *Float) Reset()                    { *m = Float{} }
func (m *Float) String() string            { return proto.CompactTextString(m) }
func (*Float) ProtoMessage()               {}
func (*Float) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Float) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Int struct {
	Value int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Int) Reset()                    { *m = Int{} }
func (m *Int) String() string            { return proto.CompactTextString(m) }
func (*Int) ProtoMessage()               {}
func (*Int) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Int) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Ints struct {
	Value []int64 `protobuf:"varint,1,rep,packed,name=value" json:"value,omitempty"`
}

func (m *Ints) Reset()                    { *m = Ints{} }
func (m *Ints) String() string            { return proto.CompactTextString(m) }
func (*Ints) ProtoMessage()               {}
func (*Ints) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Ints) GetValue() []int64 {
	if m != nil {
		return m.Value
	}
	return nil
}

type String struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Bool struct {
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Bool) Reset()                    { *m = Bool{} }
func (m *Bool) String() string            { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()               {}
func (*Bool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Bool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Track struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Duration int64  `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
}

func (m *Track) Reset()                    { *m = Track{} }
func (m *Track) String() string            { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()               {}
func (*Track) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Track) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Track) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Track) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type Artist struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Artist) Reset()                    { *m = Artist{} }
func (m *Artist) String() string            { return proto.CompactTextString(m) }
func (*Artist) ProtoMessage()               {}
func (*Artist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Artist) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Artist) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Album struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Album) Reset()                    { *m = Album{} }
func (m *Album) String() string            { return proto.CompactTextString(m) }
func (*Album) ProtoMessage()               {}
func (*Album) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Album) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Album) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Playlist struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Playlist) Reset()                    { *m = Playlist{} }
func (m *Playlist) String() string            { return proto.CompactTextString(m) }
func (*Playlist) ProtoMessage()               {}
func (*Playlist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Playlist) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Playlist) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Result struct {
	Service   string    `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Path      string    `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Playcount int64     `protobuf:"varint,3,opt,name=playcount" json:"playcount,omitempty"`
	Track     *Track    `protobuf:"bytes,4,opt,name=track" json:"track,omitempty"`
	Album     *Album    `protobuf:"bytes,5,opt,name=album" json:"album,omitempty"`
	Artist    *Artist   `protobuf:"bytes,6,opt,name=artist" json:"artist,omitempty"`
	Playlist  *Playlist `protobuf:"bytes,7,opt,name=playlist" json:"playlist,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Result) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Result) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Result) GetPlaycount() int64 {
	if m != nil {
		return m.Playcount
	}
	return 0
}

func (m *Result) GetTrack() *Track {
	if m != nil {
		return m.Track
	}
	return nil
}

func (m *Result) GetAlbum() *Album {
	if m != nil {
		return m.Album
	}
	return nil
}

func (m *Result) GetArtist() *Artist {
	if m != nil {
		return m.Artist
	}
	return nil
}

func (m *Result) GetPlaylist() *Playlist {
	if m != nil {
		return m.Playlist
	}
	return nil
}

type Results struct {
	Type    string    `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Header  string    `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	Fmt     string    `protobuf:"bytes,3,opt,name=fmt" json:"fmt,omitempty"`
	Album   *Album    `protobuf:"bytes,4,opt,name=album" json:"album,omitempty"`
	Results []*Result `protobuf:"bytes,5,rep,name=results" json:"results,omitempty"`
}

func (m *Results) Reset()                    { *m = Results{} }
func (m *Results) String() string            { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()               {}
func (*Results) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Results) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Results) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *Results) GetFmt() string {
	if m != nil {
		return m.Fmt
	}
	return ""
}

func (m *Results) GetAlbum() *Album {
	if m != nil {
		return m.Album
	}
	return nil
}

func (m *Results) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "player.Empty")
	proto.RegisterType((*UsernamePassword)(nil), "player.UsernamePassword")
	proto.RegisterType((*Request)(nil), "player.Request")
	proto.RegisterType((*Search)(nil), "player.Search")
	proto.RegisterType((*Page)(nil), "player.Page")
	proto.RegisterType((*Progress)(nil), "player.Progress")
	proto.RegisterType((*Float)(nil), "player.Float")
	proto.RegisterType((*Int)(nil), "player.Int")
	proto.RegisterType((*Ints)(nil), "player.Ints")
	proto.RegisterType((*String)(nil), "player.String")
	proto.RegisterType((*Bool)(nil), "player.Bool")
	proto.RegisterType((*Track)(nil), "player.Track")
	proto.RegisterType((*Artist)(nil), "player.Artist")
	proto.RegisterType((*Album)(nil), "player.Album")
	proto.RegisterType((*Playlist)(nil), "player.Playlist")
	proto.RegisterType((*Result)(nil), "player.Result")
	proto.RegisterType((*Results)(nil), "player.Results")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Player service

type PlayerClient interface {
	Play(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error)
	PlayAlbum(ctx context.Context, in *Results, opts ...grpc.CallOption) (*Empty, error)
	Volume(ctx context.Context, in *Float, opts ...grpc.CallOption) (*Float, error)
	Pause(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	FastForward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Rewind(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Queue(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Results, error)
	RemoveFromQueue(ctx context.Context, in *Ints, opts ...grpc.CallOption) (*Results, error)
	NextSong(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_NextSongClient, error)
	PlayProgress(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_PlayProgressClient, error)
	DownloadProgress(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_DownloadProgressClient, error)
	History(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Results, error)
	Done(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error)
	Login(ctx context.Context, in *UsernamePassword, opts ...grpc.CallOption) (*Empty, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Bool, error)
	AlbumLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error)
	FindArtist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
	FindAlbum(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
	FindTrack(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
	GetAlbum(ctx context.Context, in *String, opts ...grpc.CallOption) (*Results, error)
	GetTrack(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	GetArtistAlbums(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
	GetArtistTracks(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
	GetPlaylists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Results, error)
	GetPlaylist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error)
}

type playerClient struct {
	cc *grpc.ClientConn
}

func NewPlayerClient(cc *grpc.ClientConn) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) Play(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/player.Player/Play", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) PlayAlbum(ctx context.Context, in *Results, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/player.Player/PlayAlbum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Volume(ctx context.Context, in *Float, opts ...grpc.CallOption) (*Float, error) {
	out := new(Float)
	err := grpc.Invoke(ctx, "/player.Player/Volume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Pause(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/player.Player/Pause", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) FastForward(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/player.Player/FastForward", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Rewind(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/player.Player/Rewind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Queue(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/Queue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) RemoveFromQueue(ctx context.Context, in *Ints, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/RemoveFromQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) NextSong(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_NextSongClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Player_serviceDesc.Streams[0], c.cc, "/player.Player/NextSong", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerNextSongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Player_NextSongClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type playerNextSongClient struct {
	grpc.ClientStream
}

func (x *playerNextSongClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerClient) PlayProgress(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_PlayProgressClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Player_serviceDesc.Streams[1], c.cc, "/player.Player/PlayProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerPlayProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Player_PlayProgressClient interface {
	Recv() (*Progress, error)
	grpc.ClientStream
}

type playerPlayProgressClient struct {
	grpc.ClientStream
}

func (x *playerPlayProgressClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerClient) DownloadProgress(ctx context.Context, in *String, opts ...grpc.CallOption) (Player_DownloadProgressClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Player_serviceDesc.Streams[2], c.cc, "/player.Player/DownloadProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerDownloadProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Player_DownloadProgressClient interface {
	Recv() (*Progress, error)
	grpc.ClientStream
}

type playerDownloadProgressClient struct {
	grpc.ClientStream
}

func (x *playerDownloadProgressClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerClient) History(ctx context.Context, in *Page, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/History", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Done(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/player.Player/Done", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/player.Player/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Name(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := grpc.Invoke(ctx, "/player.Player/Name", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Login(ctx context.Context, in *UsernamePassword, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/player.Player/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/player.Player/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) AlbumLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := grpc.Invoke(ctx, "/player.Player/AlbumLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) FindArtist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/FindArtist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) FindAlbum(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/FindAlbum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) FindTrack(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/FindTrack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetAlbum(ctx context.Context, in *String, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/GetAlbum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetTrack(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := grpc.Invoke(ctx, "/player.Player/GetTrack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetArtistAlbums(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/GetArtistAlbums", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetArtistTracks(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/GetArtistTracks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetPlaylists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/GetPlaylists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetPlaylist(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/player.Player/GetPlaylist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Player service

type PlayerServer interface {
	Play(context.Context, *Result) (*Empty, error)
	PlayAlbum(context.Context, *Results) (*Empty, error)
	Volume(context.Context, *Float) (*Float, error)
	Pause(context.Context, *Empty) (*Empty, error)
	FastForward(context.Context, *Empty) (*Empty, error)
	Rewind(context.Context, *Empty) (*Empty, error)
	Queue(context.Context, *Empty) (*Results, error)
	RemoveFromQueue(context.Context, *Ints) (*Results, error)
	NextSong(*String, Player_NextSongServer) error
	PlayProgress(*String, Player_PlayProgressServer) error
	DownloadProgress(*String, Player_DownloadProgressServer) error
	History(context.Context, *Page) (*Results, error)
	Done(context.Context, *String) (*Empty, error)
	Close(context.Context, *Empty) (*Empty, error)
	Name(context.Context, *Empty) (*String, error)
	Login(context.Context, *UsernamePassword) (*Empty, error)
	Ping(context.Context, *Empty) (*Bool, error)
	AlbumLink(context.Context, *Empty) (*String, error)
	FindArtist(context.Context, *Request) (*Results, error)
	FindAlbum(context.Context, *Request) (*Results, error)
	FindTrack(context.Context, *Request) (*Results, error)
	GetAlbum(context.Context, *String) (*Results, error)
	GetTrack(context.Context, *String) (*String, error)
	GetArtistAlbums(context.Context, *Request) (*Results, error)
	GetArtistTracks(context.Context, *Request) (*Results, error)
	GetPlaylists(context.Context, *Empty) (*Results, error)
	GetPlaylist(context.Context, *Request) (*Results, error)
}

func RegisterPlayerServer(s *grpc.Server, srv PlayerServer) {
	s.RegisterService(&_Player_serviceDesc, srv)
}

func _Player_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Play(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_PlayAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Results)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).PlayAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/PlayAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).PlayAlbum(ctx, req.(*Results))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Volume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Float)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Volume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Volume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Volume(ctx, req.(*Float))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Pause(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_FastForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).FastForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/FastForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).FastForward(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Rewind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Rewind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Rewind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Rewind(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Queue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Queue(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_RemoveFromQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ints)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).RemoveFromQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/RemoveFromQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).RemoveFromQueue(ctx, req.(*Ints))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_NextSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServer).NextSong(m, &playerNextSongServer{stream})
}

type Player_NextSongServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type playerNextSongServer struct {
	grpc.ServerStream
}

func (x *playerNextSongServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _Player_PlayProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServer).PlayProgress(m, &playerPlayProgressServer{stream})
}

type Player_PlayProgressServer interface {
	Send(*Progress) error
	grpc.ServerStream
}

type playerPlayProgressServer struct {
	grpc.ServerStream
}

func (x *playerPlayProgressServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func _Player_DownloadProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(String)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServer).DownloadProgress(m, &playerDownloadProgressServer{stream})
}

type Player_DownloadProgressServer interface {
	Send(*Progress) error
	grpc.ServerStream
}

type playerDownloadProgressServer struct {
	grpc.ServerStream
}

func (x *playerDownloadProgressServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

func _Player_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Page)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).History(ctx, req.(*Page))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Done(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Close(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Name(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernamePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Login(ctx, req.(*UsernamePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_AlbumLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).AlbumLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/AlbumLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).AlbumLink(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_FindArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).FindArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/FindArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).FindArtist(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_FindAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).FindAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/FindAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).FindAlbum(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_FindTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).FindTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/FindTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).FindTrack(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/GetAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetAlbum(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/GetTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetTrack(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetArtistAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetArtistAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/GetArtistAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetArtistAlbums(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetArtistTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetArtistTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/GetArtistTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetArtistTracks(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/GetPlaylists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetPlaylists(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/GetPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetPlaylist(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Player_serviceDesc = grpc.ServiceDesc{
	ServiceName: "player.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _Player_Play_Handler,
		},
		{
			MethodName: "PlayAlbum",
			Handler:    _Player_PlayAlbum_Handler,
		},
		{
			MethodName: "Volume",
			Handler:    _Player_Volume_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Player_Pause_Handler,
		},
		{
			MethodName: "FastForward",
			Handler:    _Player_FastForward_Handler,
		},
		{
			MethodName: "Rewind",
			Handler:    _Player_Rewind_Handler,
		},
		{
			MethodName: "Queue",
			Handler:    _Player_Queue_Handler,
		},
		{
			MethodName: "RemoveFromQueue",
			Handler:    _Player_RemoveFromQueue_Handler,
		},
		{
			MethodName: "History",
			Handler:    _Player_History_Handler,
		},
		{
			MethodName: "Done",
			Handler:    _Player_Done_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Player_Close_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _Player_Name_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Player_Login_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Player_Ping_Handler,
		},
		{
			MethodName: "AlbumLink",
			Handler:    _Player_AlbumLink_Handler,
		},
		{
			MethodName: "FindArtist",
			Handler:    _Player_FindArtist_Handler,
		},
		{
			MethodName: "FindAlbum",
			Handler:    _Player_FindAlbum_Handler,
		},
		{
			MethodName: "FindTrack",
			Handler:    _Player_FindTrack_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _Player_GetAlbum_Handler,
		},
		{
			MethodName: "GetTrack",
			Handler:    _Player_GetTrack_Handler,
		},
		{
			MethodName: "GetArtistAlbums",
			Handler:    _Player_GetArtistAlbums_Handler,
		},
		{
			MethodName: "GetArtistTracks",
			Handler:    _Player_GetArtistTracks_Handler,
		},
		{
			MethodName: "GetPlaylists",
			Handler:    _Player_GetPlaylists_Handler,
		},
		{
			MethodName: "GetPlaylist",
			Handler:    _Player_GetPlaylist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NextSong",
			Handler:       _Player_NextSong_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PlayProgress",
			Handler:       _Player_PlayProgress_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadProgress",
			Handler:       _Player_DownloadProgress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "player.proto",
}

func init() { proto.RegisterFile("player.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdf, 0x93, 0xe2, 0x44,
	0x10, 0x26, 0xe4, 0x07, 0xd0, 0x8b, 0xb7, 0xd4, 0x94, 0x65, 0xa5, 0xf0, 0xb4, 0xb6, 0x62, 0x29,
	0x78, 0xb2, 0x88, 0xab, 0x56, 0xf9, 0x7a, 0x7a, 0x72, 0xae, 0xb5, 0x75, 0x85, 0x41, 0x7d, 0x9f,
	0x25, 0x23, 0x9b, 0xda, 0x24, 0x13, 0x67, 0x26, 0x8b, 0xf8, 0x87, 0xf8, 0x97, 0xfa, 0xae, 0x35,
	0x3f, 0x12, 0x20, 0xa0, 0xe4, 0x9e, 0x98, 0x4e, 0x7f, 0x5f, 0x77, 0x7f, 0x9d, 0x9e, 0x0e, 0xd0,
	0xcf, 0x13, 0xbc, 0x25, 0x6c, 0x9a, 0x33, 0x2a, 0x28, 0xf2, 0xb4, 0x15, 0x74, 0xc0, 0xfd, 0x3e,
	0xcd, 0xc5, 0x36, 0xb8, 0x83, 0xc1, 0x2f, 0x9c, 0xb0, 0x0c, 0xa7, 0x64, 0x81, 0x39, 0xdf, 0x50,
	0x16, 0xa1, 0x21, 0x74, 0x0b, 0xf3, 0xcc, 0xb7, 0xae, 0xac, 0x71, 0x2f, 0xac, 0x6c, 0xf4, 0x1c,
	0x7a, 0xb9, 0xc4, 0x31, 0xca, 0x22, 0xbf, 0xad, 0x9c, 0xbb, 0x07, 0xc1, 0x67, 0xd0, 0x09, 0xc9,
	0xef, 0x05, 0xe1, 0x02, 0x21, 0x70, 0x04, 0x61, 0xa9, 0x09, 0xa0, 0xce, 0xa8, 0x0f, 0x56, 0xa6,
	0x48, 0x76, 0x68, 0x65, 0xc1, 0x0b, 0xf0, 0x96, 0x04, 0xb3, 0xd5, 0x43, 0x03, 0xec, 0x8f, 0xe0,
	0x2c, 0xf0, 0x9a, 0x48, 0x64, 0x8e, 0xd7, 0xba, 0x2c, 0x3b, 0x54, 0x67, 0x59, 0xae, 0xfc, 0x5d,
	0xc6, 0x7f, 0x12, 0x43, 0xa8, 0x6c, 0x89, 0xe7, 0x94, 0x09, 0xdf, 0xd6, 0x91, 0xe5, 0x39, 0x98,
	0x42, 0x77, 0xc1, 0xe8, 0x9a, 0x11, 0xce, 0x75, 0x16, 0xcb, 0x64, 0x41, 0xef, 0x82, 0x2b, 0xa8,
	0xc0, 0x89, 0x09, 0xa3, 0x8d, 0xe0, 0x03, 0x70, 0xe7, 0x09, 0xc5, 0x42, 0xba, 0x9f, 0x70, 0x52,
	0xe8, 0xec, 0xed, 0x50, 0x1b, 0xc1, 0xfb, 0x60, 0xdf, 0x66, 0x35, 0xa7, 0x5d, 0x3a, 0x9f, 0x83,
	0x73, 0x9b, 0x09, 0xbe, 0xef, 0xb5, 0x77, 0xde, 0x0f, 0xc1, 0x5b, 0x0a, 0x16, 0x67, 0xeb, 0x43,
	0x76, 0x6f, 0x8f, 0xfd, 0x2d, 0xa5, 0xc9, 0xa1, 0xb7, 0x5b, 0x7a, 0x6f, 0xc1, 0xfd, 0x99, 0xe1,
	0xd5, 0x23, 0x7a, 0x06, 0xed, 0x38, 0x32, 0xcc, 0x76, 0x1c, 0x29, 0x19, 0xb1, 0x48, 0x88, 0x79,
	0x3f, 0xda, 0x90, 0x6d, 0x8a, 0x0a, 0x86, 0x45, 0x4c, 0x33, 0xd5, 0x0e, 0x3b, 0xac, 0xec, 0x60,
	0x02, 0xde, 0x4b, 0x26, 0x62, 0x2e, 0x8e, 0x62, 0x21, 0x70, 0xd4, 0x1c, 0xe8, 0x50, 0xea, 0x1c,
	0x5c, 0x83, 0xfb, 0x32, 0xb9, 0x2f, 0xd2, 0x66, 0x89, 0x83, 0x19, 0x74, 0x17, 0x09, 0xde, 0x26,
	0xa7, 0xc2, 0x9f, 0x66, 0xfc, 0x6d, 0x81, 0x17, 0x12, 0x5e, 0x24, 0x02, 0xf9, 0xd0, 0xe1, 0x84,
	0x3d, 0xc5, 0xab, 0xb2, 0x35, 0xa5, 0xa9, 0x47, 0x41, 0x3c, 0x94, 0x95, 0xc9, 0xb3, 0x9a, 0xce,
	0x04, 0x6f, 0x57, 0xb4, 0xc8, 0x84, 0x11, 0xb9, 0x7b, 0x80, 0x3e, 0x02, 0x57, 0xc8, 0x86, 0xf9,
	0xce, 0x95, 0x35, 0xbe, 0xb8, 0x79, 0x67, 0x6a, 0xae, 0x86, 0xea, 0x62, 0xa8, 0x7d, 0x12, 0x84,
	0xa5, 0x38, 0xdf, 0x3d, 0x04, 0x29, 0xc5, 0xa1, 0xf6, 0xa1, 0x4f, 0xc0, 0xc3, 0xaa, 0x5f, 0xbe,
	0xa7, 0x50, 0xcf, 0x2a, 0x94, 0x7a, 0x1a, 0x1a, 0x2f, 0x9a, 0x40, 0x37, 0x37, 0xd2, 0xfd, 0x8e,
	0x42, 0x0e, 0x4a, 0x64, 0xd9, 0x92, 0xb0, 0x42, 0x04, 0x7f, 0x59, 0xf2, 0xfa, 0x48, 0xd9, 0x5c,
	0x5d, 0x89, 0x6d, 0x4e, 0xaa, 0x2b, 0xb1, 0xcd, 0x09, 0x7a, 0x0f, 0xbc, 0x07, 0x82, 0x23, 0xc2,
	0x8c, 0x66, 0x63, 0xa1, 0x01, 0xd8, 0xbf, 0xa5, 0xe5, 0x8c, 0xcb, 0xe3, 0x4e, 0x84, 0xf3, 0x3f,
	0x22, 0xc6, 0xd0, 0x61, 0x3a, 0x9b, 0xef, 0x5e, 0xd9, 0xfb, 0x2a, 0x74, 0x11, 0x61, 0xe9, 0xbe,
	0xf9, 0xa7, 0x07, 0xde, 0x42, 0xb9, 0xd0, 0x08, 0x1c, 0x79, 0x42, 0x35, 0xec, 0xb0, 0x4a, 0xa1,
	0xd7, 0x4a, 0x0b, 0x5d, 0x43, 0x4f, 0x02, 0xf5, 0xa0, 0x5c, 0x1e, 0xa2, 0xf9, 0x31, 0x7c, 0x0c,
	0xde, 0xaf, 0x34, 0x29, 0x52, 0x82, 0x2a, 0x97, 0xba, 0x74, 0xc3, 0x43, 0x33, 0x68, 0xa1, 0x11,
	0xb8, 0x0b, 0x5c, 0xf0, 0x3d, 0xa0, 0x8a, 0x71, 0xaa, 0x82, 0x8b, 0x39, 0xe6, 0x62, 0x4e, 0xd9,
	0x06, 0xb3, 0xe8, 0x2c, 0x7c, 0x2c, 0x67, 0x6e, 0x13, 0x67, 0xe7, 0x91, 0x9f, 0x82, 0xfb, 0x53,
	0x41, 0x8a, 0xa3, 0x0a, 0xea, 0x2a, 0x83, 0x16, 0xba, 0x81, 0xcb, 0x90, 0xa4, 0xf4, 0x89, 0xcc,
	0x19, 0x4d, 0x35, 0xa9, 0x5f, 0xa2, 0xe4, 0x62, 0x38, 0xc5, 0x99, 0x42, 0xf7, 0x0d, 0xf9, 0x43,
	0x2c, 0x69, 0xb6, 0xde, 0xb5, 0x59, 0xef, 0x89, 0x61, 0xad, 0xed, 0x41, 0x6b, 0x66, 0xa1, 0xaf,
	0xa0, 0x2f, 0x3b, 0x5d, 0xed, 0xb4, 0x3a, 0x67, 0x37, 0x72, 0x06, 0xa1, 0x58, 0xdf, 0xc0, 0xe0,
	0x15, 0xdd, 0x64, 0x09, 0xc5, 0xd1, 0x5b, 0x32, 0x5f, 0x40, 0xe7, 0x87, 0x98, 0x0b, 0xca, 0xb6,
	0x3b, 0x2d, 0x72, 0x39, 0x9f, 0xd2, 0x32, 0x02, 0xe7, 0x15, 0xcd, 0xc8, 0x51, 0xe4, 0xa3, 0x9e,
	0x8e, 0xc0, 0xfd, 0x2e, 0xa1, 0x0d, 0xde, 0xea, 0x08, 0x9c, 0x37, 0x38, 0x3d, 0xc2, 0xd5, 0x12,
	0xa8, 0xd6, 0xbb, 0x77, 0x74, 0x1d, 0x67, 0xc8, 0x2f, 0x5d, 0xf5, 0x0f, 0xdd, 0x71, 0xf0, 0x8f,
	0xc1, 0x59, 0xc8, 0x75, 0x5c, 0x0b, 0x5e, 0xc9, 0x94, 0xdb, 0x38, 0x68, 0xa1, 0x09, 0xf4, 0xd4,
	0x5c, 0xdf, 0xc5, 0xd9, 0xe3, 0xf9, 0x42, 0x66, 0x00, 0xf3, 0x38, 0x8b, 0xcc, 0x82, 0xdd, 0x6b,
	0x92, 0xfa, 0x50, 0x9e, 0xea, 0xda, 0xe7, 0xd0, 0x53, 0x8c, 0xfa, 0xdd, 0x39, 0x47, 0xd0, 0x9f,
	0x83, 0x26, 0x84, 0x6b, 0xe8, 0xbe, 0x26, 0xc2, 0x6c, 0xf1, 0xda, 0xbb, 0x39, 0x01, 0x9f, 0x28,
	0xb8, 0xf9, 0xda, 0xfc, 0xd7, 0x48, 0x56, 0x82, 0xbf, 0x86, 0x4b, 0x19, 0x5c, 0xe9, 0x55, 0x29,
	0x78, 0xa3, 0x9a, 0xf6, 0x69, 0x2a, 0x55, 0x33, 0xda, 0x0c, 0xfa, 0xaf, 0x89, 0x28, 0xd7, 0x29,
	0x6f, 0x70, 0x29, 0xbf, 0x80, 0x8b, 0x3d, 0x46, 0x93, 0x24, 0xf7, 0x9e, 0xfa, 0xfb, 0xf4, 0xe5,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x66, 0xdc, 0xc0, 0x4e, 0x09, 0x00, 0x00,
}
