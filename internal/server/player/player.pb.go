// Code generated by protoc-gen-go. DO NOT EDIT.
// source: player.proto

/*
Package player is a generated protocol buffer package.

It is generated from these files:
	player.proto

It has these top-level messages:
	Empty
	Result
*/
package player

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Result struct {
	Service  string           `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Path     string           `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Track    *Result_Track    `protobuf:"bytes,3,opt,name=track" json:"track,omitempty"`
	Album    *Result_Album    `protobuf:"bytes,4,opt,name=album" json:"album,omitempty"`
	Artist   *Result_Artist   `protobuf:"bytes,5,opt,name=artist" json:"artist,omitempty"`
	Playlist *Result_Playlist `protobuf:"bytes,6,opt,name=playlist" json:"playlist,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Result) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Result) GetTrack() *Result_Track {
	if m != nil {
		return m.Track
	}
	return nil
}

func (m *Result) GetAlbum() *Result_Album {
	if m != nil {
		return m.Album
	}
	return nil
}

func (m *Result) GetArtist() *Result_Artist {
	if m != nil {
		return m.Artist
	}
	return nil
}

func (m *Result) GetPlaylist() *Result_Playlist {
	if m != nil {
		return m.Playlist
	}
	return nil
}

type Result_Track struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Duration int64  `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
}

func (m *Result_Track) Reset()                    { *m = Result_Track{} }
func (m *Result_Track) String() string            { return proto.CompactTextString(m) }
func (*Result_Track) ProtoMessage()               {}
func (*Result_Track) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Result_Track) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Result_Track) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Result_Track) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type Result_Artist struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Result_Artist) Reset()                    { *m = Result_Artist{} }
func (m *Result_Artist) String() string            { return proto.CompactTextString(m) }
func (*Result_Artist) ProtoMessage()               {}
func (*Result_Artist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *Result_Artist) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Result_Artist) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Result_Album struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Result_Album) Reset()                    { *m = Result_Album{} }
func (m *Result_Album) String() string            { return proto.CompactTextString(m) }
func (*Result_Album) ProtoMessage()               {}
func (*Result_Album) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

func (m *Result_Album) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Result_Album) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Result_Playlist struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *Result_Playlist) Reset()                    { *m = Result_Playlist{} }
func (m *Result_Playlist) String() string            { return proto.CompactTextString(m) }
func (*Result_Playlist) ProtoMessage()               {}
func (*Result_Playlist) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 3} }

func (m *Result_Playlist) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Result_Playlist) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "player.Empty")
	proto.RegisterType((*Result)(nil), "player.Result")
	proto.RegisterType((*Result_Track)(nil), "player.Result.Track")
	proto.RegisterType((*Result_Artist)(nil), "player.Result.Artist")
	proto.RegisterType((*Result_Album)(nil), "player.Result.Album")
	proto.RegisterType((*Result_Playlist)(nil), "player.Result.Playlist")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Player service

type PlayerClient interface {
	Play(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error)
	PlayAlbum(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error)
}

type playerClient struct {
	cc *grpc.ClientConn
}

func NewPlayerClient(cc *grpc.ClientConn) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) Play(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/player.Player/Play", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) PlayAlbum(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/player.Player/PlayAlbum", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Player service

type PlayerServer interface {
	Play(context.Context, *Result) (*Empty, error)
	PlayAlbum(context.Context, *Result) (*Empty, error)
}

func RegisterPlayerServer(s *grpc.Server, srv PlayerServer) {
	s.RegisterService(&_Player_serviceDesc, srv)
}

func _Player_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Play(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_PlayAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).PlayAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/PlayAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).PlayAlbum(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

var _Player_serviceDesc = grpc.ServiceDesc{
	ServiceName: "player.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _Player_Play_Handler,
		},
		{
			MethodName: "PlayAlbum",
			Handler:    _Player_PlayAlbum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}

func init() { proto.RegisterFile("player.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x5d, 0xdb, 0x64, 0xdd, 0x53, 0x77, 0x78, 0x4c, 0x0c, 0x3d, 0x8d, 0x5d, 0x1c, 0xe2,
	0x8a, 0x6c, 0x7f, 0x81, 0x07, 0x0f, 0xde, 0x46, 0xf0, 0x2e, 0xd9, 0x5a, 0x30, 0xd8, 0xd9, 0x92,
	0xa6, 0xc2, 0xfe, 0x49, 0xff, 0x26, 0xc9, 0x4b, 0x3a, 0x70, 0x08, 0xf6, 0x96, 0xaf, 0xdf, 0xef,
	0xa5, 0xdf, 0x17, 0x1e, 0x5c, 0x35, 0x95, 0x3a, 0x96, 0x26, 0x6f, 0x4c, 0x6d, 0x6b, 0xe4, 0x5e,
	0x2d, 0xc6, 0xc0, 0x9e, 0x0f, 0x8d, 0x3d, 0x2e, 0xbe, 0x63, 0xe0, 0xb2, 0x6c, 0xbb, 0xca, 0xa2,
	0x80, 0x71, 0x5b, 0x9a, 0x2f, 0xbd, 0x2f, 0xc5, 0x68, 0x3e, 0x5a, 0x4e, 0x64, 0x2f, 0x11, 0x21,
	0x69, 0x94, 0x7d, 0x17, 0x11, 0x7d, 0xa6, 0x33, 0xde, 0x03, 0xb3, 0x46, 0xed, 0x3f, 0x44, 0x3c,
	0x1f, 0x2d, 0x2f, 0xd7, 0xb3, 0x3c, 0xfc, 0xc7, 0x5f, 0x96, 0xbf, 0x3a, 0x4f, 0x7a, 0xc4, 0xb1,
	0xaa, 0xda, 0x75, 0x07, 0x91, 0xfc, 0xc9, 0x3e, 0x39, 0x4f, 0x7a, 0x04, 0x57, 0xc0, 0x95, 0xb1,
	0xba, 0xb5, 0x82, 0x11, 0x7c, 0x73, 0x0e, 0x93, 0x29, 0x03, 0x84, 0x1b, 0x48, 0x9d, 0x5f, 0xb9,
	0x01, 0x4e, 0x03, 0xb7, 0x67, 0x03, 0xdb, 0x60, 0xcb, 0x13, 0x98, 0xbd, 0x00, 0xa3, 0x7c, 0x38,
	0x85, 0x48, 0x17, 0xa1, 0x6d, 0xa4, 0x0b, 0x9c, 0x01, 0xb3, 0xda, 0x56, 0x65, 0x68, 0xea, 0x05,
	0x66, 0x90, 0x16, 0x9d, 0x51, 0x56, 0xd7, 0x9f, 0xd4, 0x36, 0x96, 0x27, 0x9d, 0xe5, 0xc0, 0x7d,
	0xa2, 0x61, 0x77, 0x65, 0x2b, 0x60, 0x54, 0x77, 0x20, 0xfe, 0x08, 0x69, 0x9f, 0x7f, 0xd8, 0xc4,
	0xfa, 0x0d, 0xf8, 0x96, 0xfa, 0xe3, 0x1d, 0x24, 0xee, 0x84, 0xd3, 0xdf, 0x0f, 0x92, 0x5d, 0xf7,
	0xda, 0x6f, 0xc0, 0x05, 0x3e, 0xc0, 0xc4, 0x81, 0x21, 0xd7, 0x3f, 0xf4, 0x8e, 0xd3, 0x26, 0x6d,
	0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xce, 0x7b, 0x98, 0x92, 0x59, 0x02, 0x00, 0x00,
}
